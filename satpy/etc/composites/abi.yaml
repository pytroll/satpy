sensor_name: visir/abi

modifiers:
  rayleigh_corrected_crefl:
    compositor: !!python/name:satpy.composites.viirs.ReflectanceCorrector
    dem_filename: CMGDEM.hdf
    optional_prerequisites:
    - name: satellite_azimuth_angle
    - name: satellite_zenith_angle
    - name: solar_azimuth_angle
    - name: solar_zenith_angle

  rayleigh_corrected_500m:
    compositor: !!python/name:satpy.composites.PSPRayleighReflectance
    atmosphere: midlatitude summer
    aerosol_type: marine_tropical_aerosol
    prerequisites:
    - name: C02
      modifiers: [effective_solar_pathlength_corrected]
    optional_prerequisites:
    - satellite_azimuth_angle
    - satellite_zenith_angle
    - solar_azimuth_angle
    - solar_zenith_angle

composites:
  green_crefl:
    compositor: !!python/name:satpy.composites.abi.SimulatedGreen
    # FUTURE: Set a wavelength...see what happens. Dependency finding
    #         probably wouldn't work.
    prerequisites:
    # should we be using the most corrected or least corrected inputs?
    - name: C01
      modifiers: [sunz_corrected, rayleigh_corrected_crefl]
    - name: C02
      modifiers: [sunz_corrected, rayleigh_corrected_crefl]
    - name: C03
      modifiers: [sunz_corrected, rayleigh_corrected_crefl]
    standard_name: toa_bidirectional_reflectance

  green_raw:
    compositor: !!python/name:satpy.composites.abi.SimulatedGreen
    # FUTURE: Set a wavelength...see what happens. Dependency finding
    #         probably wouldn't work.
    prerequisites:
    # should we be using the most corrected or least corrected inputs?
    - name: C01
      modifiers: [sunz_corrected]
    - name: C02
      modifiers: [sunz_corrected]
    - name: C03
      modifiers: [sunz_corrected]
    standard_name: toa_bidirectional_reflectance

  green:
    compositor: !!python/name:satpy.composites.abi.SimulatedGreen
    # FUTURE: Set a wavelength...see what happens. Dependency finding
    #         probably wouldn't work.
    prerequisites:
    # should we be using the most corrected or least corrected inputs?
    - name: C01
      modifiers: [sunz_corrected, rayleigh_corrected]
    - name: C02
      modifiers: [sunz_corrected, rayleigh_corrected]
    - name: C03
      modifiers: [sunz_corrected]
    standard_name: toa_bidirectional_reflectance

  true_color_crefl:
    compositor: !!python/name:satpy.composites.SelfSharpenedRGB
    prerequisites:
    - name: C02
      modifiers: [sunz_corrected, rayleigh_corrected_crefl]
    - name: green_crefl
    - name: C01
      modifiers: [sunz_corrected, rayleigh_corrected_crefl]
    standard_name: true_color

  true_color_raw:
    compositor: !!python/name:satpy.composites.SelfSharpenedRGB
    prerequisites:
    - name: C02
      modifiers: [sunz_corrected]
    - name: green_raw
    - name: C01
      modifiers: [sunz_corrected]
    standard_name: true_color

  true_color:
    compositor: !!python/name:satpy.composites.SelfSharpenedRGB
    prerequisites:
    - name: C02
      modifiers: [sunz_corrected, rayleigh_corrected]
    - name: green
    - name: C01
      modifiers: [sunz_corrected, rayleigh_corrected]
    standard_name: true_color

  natural_color:
    compositor: !!python/name:satpy.composites.SelfSharpenedRGB
    prerequisites:
    - name: C05
      modifiers: [sunz_corrected]
    - name: C03
      modifiers: [sunz_corrected]
    - name: C02
      modifiers: [sunz_corrected]
    high_resolution_band: blue
    standard_name: natural_color

  natural_color_raw:
    compositor: !!python/name:satpy.composites.GenericCompositor
    prerequisites:
    - name: C05
    - name: C03
    - name: C02
    standard_name: natural_color

  overview:
    compositor: !!python/name:satpy.composites.GenericCompositor
    prerequisites:
    - name: C02
      modifiers: [sunz_corrected]
    - name: C03
      modifiers: [sunz_corrected]
    - C14
    standard_name: overview

  overview_raw:
    compositor: !!python/name:satpy.composites.GenericCompositor
    prerequisites:
    - C02
    - C03
    - C14
    standard_name: overview

  airmass:
    compositor: !!python/name:satpy.composites.GenericCompositor
    prerequisites:
    - compositor: !!python/name:satpy.composites.DifferenceCompositor
      prerequisites:
      - name: C08
      - name: C10
    - compositor: !!python/name:satpy.composites.DifferenceCompositor
      prerequisites:
        - name: C12
        - name: C13
    - name: C08
    standard_name: airmass

  # CIMSS True Color Composites
  cimss_green_sunz_rayleigh:
    compositor: !!python/name:satpy.composites.abi.SimulatedGreen
    fractions: [0.45, 0.45, 0.1]
    prerequisites:
      # should we be using the most corrected or least corrected inputs?
      - name: C01
        modifiers: [sunz_corrected, rayleigh_corrected]
      - name: C02
        modifiers: [sunz_corrected, rayleigh_corrected]
      - name: C03
        modifiers: [sunz_corrected]
    standard_name: toa_bidirection_reflectance

  cimss_green_sunz:
    compositor: !!python/name:satpy.composites.abi.SimulatedGreen
    fractions: [0.45, 0.45, 0.1]
    prerequisites:
      # should we be using the most corrected or least corrected inputs?
      - name: C01
        modifiers: [sunz_corrected]
      - name: C02
        modifiers: [sunz_corrected]
      - name: C03
        modifiers: [sunz_corrected]
    standard_name: toa_bidirection_reflectance

  cimss_green:
    compositor: !!python/name:satpy.composites.abi.SimulatedGreen
    fractions: [0.45, 0.45, 0.1]
    prerequisites:
      # should we be using the most corrected or least corrected inputs?
      - name: C01
      - name: C02
      - name: C03
    standard_name: toa_bidirection_reflectance

  cimss_true_color_sunz_rayleigh:
    compositor: !!python/name:satpy.composites.SelfSharpenedRGB
    description: >
      CIMSS Natural (True) Color RGB. This version has been adjusted for the
      cosine of the solar zenith angle and has had rayleigh correction applied.
      This RGB is ratio sharpened by comparing a high resolution C02 (red)
      band with a lower/averaged version of itself and applying that ratio to
      the green and blue channels.
    references:
      Research Article: https://agupubs.onlinelibrary.wiley.com/doi/10.1029/2018EA000379
    prerequisites:
      - name: C02
        modifiers: [sunz_corrected, rayleigh_corrected]
      - name: cimss_green_sunz_rayleigh
      - name: C01
        modifiers: [sunz_corrected, rayleigh_corrected]
    standard_name: cimss_true_color

  cimss_true_color_sunz:
    compositor: !!python/name:satpy.composites.SelfSharpenedRGB
    description: >
      CIMSS Natural (True) Color RGB. This version has been adjusted for the
      cosine of the solar zenith angle.
      This RGB is ratio sharpened by comparing a high resolution C02 (red)
      band with a lower/averaged version of itself and applying that ratio to
      the green and blue channels.
    references:
      Research Article: https://agupubs.onlinelibrary.wiley.com/doi/10.1029/2018EA000379
    prerequisites:
      - name: C02
        modifiers: [sunz_corrected]
      - name: cimss_green_sunz
      - name: C01
        modifiers: [sunz_corrected]
    standard_name: cimss_true_color

  cimss_true_color:
    compositor: !!python/name:satpy.composites.SelfSharpenedRGB
    description: >
      CIMSS Natural (True) Color RGB. No solar zenith angle or atmospheric
      corrections are applied to this composite.
      This RGB is ratio sharpened by comparing a high resolution C02 (red)
      band with a lower/averaged version of itself and applying that ratio to
      the green and blue channels.
    references:
      Research Article: https://agupubs.onlinelibrary.wiley.com/doi/10.1029/2018EA000379
    prerequisites:
      - name: C02
      - name: cimss_green
      - name: C01
    standard_name: cimss_true_color

  cloudmask:
    compositor: !!python/name:satpy.composites.PaletteCompositor
    prerequisites:
    - cma
    - cma_pal
    standard_name: cloudmask

  cloudtype:
    compositor: !!python/name:satpy.composites.PaletteCompositor
    prerequisites:
    - ct
    - ct_pal
    standard_name: cloudtype

  cloud_top_height:
    compositor: !!python/name:satpy.composites.PaletteCompositor
    prerequisites:
    - ctth_alti
    - ctth_alti_pal
    standard_name: cloud_top_height

  cloud_top_pressure:
    compositor: !!python/name:satpy.composites.PaletteCompositor
    prerequisites:
    - ctth_pres
    - ctth_pres_pal
    standard_name: cloud_top_pressure

  cloud_top_temperature:
    compositor: !!python/name:satpy.composites.PaletteCompositor
    prerequisites:
    - ctth_tempe
    - ctth_tempe_pal
    standard_name: cloud_top_temperature

  cloud_top_phase:
    compositor: !!python/name:satpy.composites.PaletteCompositor
    prerequisites:
    - cmic_phase
    - cmic_phase_pal
    standard_name: cloud_top_phase

  cloud_drop_effective_radius:
    compositor: !!python/name:satpy.composites.PaletteCompositor
    prerequisites:
    - cmic_reff
    - cmic_reff_pal
    standard_name: cloud_drop_effective_radius

  cloud_optical_thickness:
    compositor: !!python/name:satpy.composites.PaletteCompositor
    prerequisites:
    - cmic_cot
    - cmic_cot_pal
    standard_name: cloud_optical_thickness

  cloud_liquid_water_path:
    compositor: !!python/name:satpy.composites.PaletteCompositor
    prerequisites:
    - cmic_lwp
    - cmic_lwp_pal
    standard_name: cloud_liquid_water_path

  cloud_ice_water_path:
    compositor: !!python/name:satpy.composites.PaletteCompositor
    prerequisites:
    - cmic_iwp
    - cmic_iwp_pal
    standard_name: cloud_ice_water_path

  precipitation_probability:
    compositor: !!python/name:satpy.composites.PaletteCompositor
    prerequisites:
    - pc
    - pc_pal
    standard_name: precipitation_probability

  convective_rain_rate:
    compositor: !!python/name:satpy.composites.PaletteCompositor
    prerequisites:
    - crr
    - crr_pal
    standard_name: convective_rain_rate

  convective_precipitation_hourly_accumulation:
    compositor: !!python/name:satpy.composites.PaletteCompositor
    prerequisites:
    - crr_accum
    - crr_pal
    standard_name: convective_precipitation_hourly_accumulation

  total_precipitable_water:
    compositor: !!python/name:satpy.composites.PaletteCompositor
    prerequisites:
    - ishai_tpw
    - ishai_tpw_pal
    standard_name: total_precipitable_water

  showalter_index:
    compositor: !!python/name:satpy.composites.PaletteCompositor
    prerequisites:
    - ishai_shw
    - ishai_shw_pal
    standard_name: showalter_index

  lifted_index:
    compositor: !!python/name:satpy.composites.PaletteCompositor
    prerequisites:
    - ishai_li
    - ishai_li_pal
    standard_name: lifted_index

  convection_initiation_prob30:
    compositor: !!python/name:satpy.composites.PaletteCompositor
    prerequisites:
    - ci_prob30
    - ci_pal
    standard_name: convection_initiation_prob30

  convection_initiation_prob60:
    compositor: !!python/name:satpy.composites.PaletteCompositor
    prerequisites:
    - ci_prob60
    - ci_pal
    standard_name: convection_initiation_prob60

  convection_initiation_prob90:
    compositor: !!python/name:satpy.composites.PaletteCompositor
    prerequisites:
    - ci_prob90
    - ci_pal
    standard_name: convection_initiation_prob90

  asii_prob:
    compositor: !!python/name:satpy.composites.PaletteCompositor
    prerequisites:
    - asii_turb_trop_prob
    - asii_turb_prob_pal
    standard_name: asii_prob

  rdt_cell_type:
    compositor: !!python/name:satpy.composites.PaletteCompositor
    prerequisites:
    - MapCellCatType
    - MapCellCatType_pal
    standard_name: rdt_cell_type
